variables:
    BUILD_TF_IMG: 'fasle'
    BUILD_ANGULAR_IMG: 'false'
    BUILD_PACKER_IMG: 'false'
    VALIDATE_TF: 'false'
    BUILD_AMI: 'false'
    BUILD_LAMBDAS: 'false'
    BUILD_WEBSITE: 'true'
    DEPLOY_TF: 'true'
    DEPLOY_TF_BUCKET: 'false'

stages:
    - build_img
    - build_ami
    - tBackend
    - build_website
    - build_lambdas
    - validate
    - deploy
    - cleanup
    
build_tf_container:
    stage: build_img
    image: docker
    services:
        - docker:dind
    before_script:
        - cd ./Terraform
        - docker login registry.gitlab.com -u $K8S_SECRET_DOCKER_USER -p $K8S_SECRET_DOCKER_KEY
    script: 
        - docker build -t registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/terraform .
        - docker push registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/terraform
    only: 
        variables:
            - $BUILD_TF_IMG=='true'

build_angular_container:
    stage: build_img
    image: docker
    services:
        - docker:dind
    before_script:
        - cd ./Website
        - docker login registry.gitlab.com -u $K8S_SECRET_DOCKER_USER -p $K8S_SECRET_DOCKER_KEY
    script: 
        - docker build -t registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/angular .
        - docker push registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/angular
    only: 
        variables:
            - $BUILD_ANGULAR_IMG=='true'
build_packer_container:
    stage: build_img
    image: docker
    services:
        - docker:dind
    before_script:
        - cd ./Packer
        - docker login registry.gitlab.com -u $K8S_SECRET_DOCKER_USER -p $K8S_SECRET_DOCKER_KEY
    script: 
        - docker build -t registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/packer .
        - docker push registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/packer
    only: 
        variables:
            - $BUILD_PACKER_IMG=='true'

build_worker_image:
    stage: build_ami
    image: registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/packer:latest
    script: packer build ./Packer/worker_img.json
    only: 
        variables:
            - $BUILD_AMI=='true'   

build_provision_image:
    stage: build_ami
    image: registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/packer:latest
    script: packer build ./Packer/provision_img.json
    only: 
        variables:
            - $BUILD_AMI=='true' 

build_getpy:
    stage: build_lambdas
    image: registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/packer:latest
    before_script: 
        - cd ./Lambdas
        - export AWS_ACCESS_KEY_ID=$K8S_SECRET_AWS_AKEY
        - export AWS_SECRET_ACCESS_KEY=$K8S_SECRET_AWS_SKEY
    script:
        - pip install --target ./package Pillow
        - cd ./package
        - zip -r9 ${OLDPWD}/get.zip .
        - cd $OLDPWD
        - zip -g get.zip get.py
        - aws s3 cp get.zip s3://mlewicki-mybucket-atos.net
    only: 
        variables:
            - $BUILD_LAMBDAS=='true' 
build_delpy:
    stage: build_lambdas
    image: registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/packer:latest
    before_script: 
        - cd ./Lambdas
        - export AWS_ACCESS_KEY_ID=$K8S_SECRET_AWS_AKEY
        - export AWS_SECRET_ACCESS_KEY=$K8S_SECRET_AWS_SKEY
    script:
        - pip install --target ./package Pillow
        - cd ./package
        - zip -r9 ${OLDPWD}/delete.zip .
        - cd $OLDPWD
        - zip -g delete.zip delete.py
        - aws s3 cp delete.zip s3://mlewicki-mybucket-atos.net
    only: 
        variables:
            - $BUILD_LAMBDAS=='true' 
build_postpy:
    stage: build_lambdas
    image: registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/packer:latest
    before_script: 
        - cd ./Lambdas
        - export AWS_ACCESS_KEY_ID=$K8S_SECRET_AWS_AKEY
        - export AWS_SECRET_ACCESS_KEY=$K8S_SECRET_AWS_SKEY
    script:
        - pip install --target ./package Pillow
        - cd ./package
        - zip -r9 ${OLDPWD}/post.zip .
        - cd $OLDPWD
        - zip -g post.zip post.py
        - aws s3 cp post.zip s3://mlewicki-mybucket-atos.net
    only: 
        variables:
            - $BUILD_LAMBDAS=='true' 
build_putpy:
    stage: build_lambdas
    image: registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/packer:latest
    before_script: 
        - cd ./Lambdas
        - export AWS_ACCESS_KEY_ID=$K8S_SECRET_AWS_AKEY
        - export AWS_SECRET_ACCESS_KEY=$K8S_SECRET_AWS_SKEY
    script:
        - pip install --target ./package Pillow
        - cd ./package
        - zip -r9 ${OLDPWD}/put.zip .
        - cd $OLDPWD
        - zip -g put.zip put.py
        - aws s3 cp put.zip s3://mlewicki-mybucket-atos.net
    only: 
        variables:
            - $BUILD_LAMBDAS=='true' 
build_handpy:
    stage: build_lambdas
    image: registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/packer:latest
    before_script: 
        - cd ./Lambdas
        - export AWS_ACCESS_KEY_ID=$K8S_SECRET_AWS_AKEY
        - export AWS_SECRET_ACCESS_KEY=$K8S_SECRET_AWS_SKEY
    script:
        - pip install --target ./package Pillow
        - cd ./package
        - zip -r9 ${OLDPWD}/handler.zip .
        - cd $OLDPWD
        - zip -g ./handler.zip handler.py
        - aws s3 cp handler.zip s3://mlewicki-mybucket-atos.net
    only: 
        variables:
            - $BUILD_LAMBDAS=='true' 


validate_terraform_bucket:
    stage: tBackend
    before_script:
        - cd ./Terraform/Bucket
        - terraform init
    image: registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/terraform:latest
    script: 
        - terraform validate
    only: 
        variables:
            - $DEPLOY_TF_BUCKET=='true'

deploy_terraform_bucket:
    stage: tBackend
    before_script:
        - cd ./Terraform/Bucket
        - terraform init
    image: registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/terraform:latest
    script: 
        - terraform apply -var "my-access-key=$K8S_SECRET_AWS_AKEY" -var "my-secret-key=$K8S_SECRET_AWS_SKEY" -auto-approve
    only: 
        variables:
            - $DEPLOY_TF_BUCKET=='true'     

validate_terraform_full_arch:
    stage: validate
    before_script:
        - cd ./Terraform/Arch
        - export AWS_ACCESS_KEY_ID=$K8S_SECRET_AWS_AKEY
        - export AWS_SECRET_ACCESS_KEY=$K8S_SECRET_AWS_SKEY
        - terraform init
    image: registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/terraform:latest
    script: 
        - terraform validate 
    only: 
        variables:
            - $VALIDATE_TF=='true'

deploy_terraform_full_arch:
    stage: deploy
    before_script:
        - cd ./Terraform/Arch
        - export AWS_ACCESS_KEY_ID=$K8S_SECRET_AWS_AKEY
        - export AWS_SECRET_ACCESS_KEY=$K8S_SECRET_AWS_SKEY
        - terraform init
    image: registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/terraform:latest
    script: 
        - terraform apply -var "my-access-key=$K8S_SECRET_AWS_AKEY" -var "my-secret-key=$K8S_SECRET_AWS_SKEY" -auto-approve
    only: 
        variables:
            - $DEPLOY_TF=='true'     

destroy_terraform_full_arch:
    stage: cleanup
    before_script:
        - cd ./Terraform/Arch
        - export AWS_ACCESS_KEY_ID=$K8S_SECRET_AWS_AKEY
        - export AWS_SECRET_ACCESS_KEY=$K8S_SECRET_AWS_SKEY
        - terraform init
    image: registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/terraform:latest
    script: 
        - terraform destroy -var "my-access-key=$K8S_SECRET_AWS_AKEY" -var "my-secret-key=$K8S_SECRET_AWS_SKEY" -auto-approve
    when: on_failure
            
            
build_website:
    stage: deploy
    image: registry.gitlab.com/$K8S_SECRET_DOCKER_USER/aws_poc/angular:latest
    before_script:
        - export AWS_ACCESS_KEY_ID=$K8S_SECRET_AWS_AKEY
        - export AWS_SECRET_ACCESS_KEY=$K8S_SECRET_AWS_SKEY
    script: 
        - cd ./Website/MTT
        - npm install
        - ng build --prod
        - cd dist/MTT
        - tar -cvf website.tar *
        - aws s3 cp ./website.tar s3://mlewicki-mybucket-atos.net
    only: 
        variables:
            - $BUILD_WEBSITE=='true'
